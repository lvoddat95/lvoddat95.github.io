(function ($) {
    'use strict'; $.Zebra_Dialog = function () {
    this.version = '2.0.0'; var defaults = { animation_speed_hide: 250, animation_speed_show: 0, auto_close: !1, auto_focus_button: !0, buttons: !0, center_buttons: !1, custom_class: !1, keyboard: !0, max_height: 0, message: '', modal: !0, overlay_close: !0, overlay_opacity: '.9', position: 'center', reposition_speed: 500, show_close_button: !0, source: !1, title: '', type: 'information', vcenter_short_message: !0, width: 0, onClose: null }, plugin = this, options = {}, timeout, _draw = function () {
        var
        viewport_width = $(window).width(), viewport_height = $(window).height(), dialog_width = plugin.dialog.width(), dialog_height = plugin.dialog.height(), values = { 'left': 0, 'top': 0, 'right': viewport_width - dialog_width, 'bottom': viewport_height - dialog_height, 'center': (viewport_width - dialog_width) / 2, 'middle': (viewport_height - dialog_height) / 2 }, message, message_height, container_height; plugin.dialog_left = undefined; plugin.dialog_top = undefined; if ($.isArray(plugin.settings.position) && plugin.settings.position.length === 2 && typeof plugin.settings.position[0] === 'string' && plugin.settings.position[0].match(/^(left|right|center)[\s0-9\+\-]*$/) && typeof plugin.settings.position[1] === 'string' && plugin.settings.position[1].match(/^(top|bottom|middle)[\s0-9\+\-]*$/)) {
            plugin.settings.position[0] = plugin.settings.position[0].toLowerCase(); plugin.settings.position[1] = plugin.settings.position[1].toLowerCase(); $.each(values, function (index, value) {
                var i, tmp; for (i = 0; i < 2; i++) {
                    tmp = plugin.settings.position[i].replace(index, value); if (tmp !== plugin.settings.position[i])
                        if (i === 0) plugin.dialog_left = _eval(tmp); else plugin.dialog_top = _eval(tmp)
                }
            })
        }
        if (undefined === plugin.dialog_left || undefined === plugin.dialog_top) { plugin.dialog_left = values.center; plugin.dialog_top = values.middle }
        if (plugin.dialog_top < 0) plugin.dialog_top = 0; if (dialog_height > viewport_height)
            plugin.body.css('height', viewport_height - ($('.ZebraDialog_Title', plugin.dialog) ? $('.ZebraDialog_Title', plugin.dialog).outerHeight() : 0) - ($('.ZebraDialog_Buttons', plugin.dialog) ? $('.ZebraDialog_Buttons', plugin.dialog).outerHeight() : 0) - (parseFloat(plugin.body.css('paddingTop')) || 0) - (parseFloat(plugin.body.css('paddingBottom')) || 0) - (parseFloat(plugin.body.css('borderTopWidth')) || 0) - (parseFloat(plugin.body.css('borderBottomWidth')) || 0)); if (plugin.settings.vcenter_short_message) {
                message = plugin.body.find('div:first'); message_height = message.height(); container_height = plugin.body.height(); if (message_height < container_height)
                    message.css('padding-top', (container_height - message_height) / 2)
            }
        if ((typeof arguments[0] === 'boolean' && arguments[0] === !1) || plugin.settings.reposition_speed === 0)
            plugin.dialog.css({ 'left': plugin.dialog_left, 'top': plugin.dialog_top, 'visibility': 'visible', 'opacity': 0 }).animate({ 'opacity': '1' }, plugin.settings.animation_speed_show); else { plugin.dialog.stop(!0); plugin.dialog.css('visibility', 'visible').animate({ 'left': plugin.dialog_left, 'top': plugin.dialog_top }, plugin.settings.reposition_speed) }
        if (undefined === timeout)
            if (plugin.settings.auto_focus_button !== !1)
                plugin.dialog.find('a[class^=ZebraDialog_Button]').eq(plugin.settings.auto_focus_button === !0 ? 0 : plugin.settings.auto_focus_button).focus(); else plugin.body.attr('tabindex', 1).focus().removeAttr('tabindex'); if (plugin.isIE6) setTimeout(_emulate_fixed_position, 500)
    }, _emulate_fixed_position = function () {
        var
        scroll_top = $(window).scrollTop(), scroll_left = $(window).scrollLeft(); if (plugin.settings.modal)
            plugin.overlay.css({ 'top': scroll_top, 'left': scroll_left }); plugin.dialog.css({ 'left': plugin.dialog_left + scroll_left, 'top': plugin.dialog_top + scroll_top })
    }, _get_buttons = function () {
        if (plugin.settings.buttons !== !0 && !$.isArray(plugin.settings.buttons)) return !1; if (plugin.settings.buttons === !0)
            switch (plugin.settings.type) { case 'question': case 'warning': plugin.settings.buttons = ['Ok', 'Cancel']; break; default: plugin.settings.buttons = ['Ok'] }
        return plugin.settings.buttons
    }, _get_type = function () { switch (plugin.settings.type) { case 'confirmation': case 'error': case 'information': case 'question': case 'warning': return plugin.settings.type.charAt(0).toUpperCase() + plugin.settings.type.slice(1).toLowerCase(); default: return !1 } }, _eval = function (source) { var total = 0; source = source.replace(/\s/g, '').match(/[+\-]?([0-9\.\s]+)/g) || []; while (source.length) total += parseFloat(source.shift()); return total }, browser = {
        init: function () { this.name = this.searchString(this.dataBrowser) || ''; this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || '' }, searchString: function (data) {
            var i, dataString, dataProp; for (i = 0; i < data.length; i++) {
                dataString = data[i].string; dataProp = data[i].prop; this.versionSearchString = data[i].versionSearch || data[i].identity; if (dataString) {
                    if (dataString.indexOf(data[i].subString) !== -1)
                        return data[i].identity
                } else if (dataProp)
                    return data[i].identity
            }
        }, searchVersion: function (dataString) { var index = dataString.indexOf(this.versionSearchString); if (index === -1) return; return parseFloat(dataString.substring(index + this.versionSearchString.length + 1)) }, dataBrowser: [{ string: navigator.userAgent, subString: 'MSIE', identity: 'explorer', versionSearch: 'MSIE' }]
    }; plugin.settings = {}; if (typeof arguments[0] === 'string') options.message = arguments[0]; if (typeof arguments[0] === 'object' || typeof arguments[1] === 'object')
            options = $.extend(options, (typeof arguments[0] === 'object' ? arguments[0] : arguments[1])); plugin.init = function () {
                $(".ZebraDialog").remove(); $(".ZebraDialogOverlay").remove(); var ajax_options, button_bar, buttons, canvas, default_options, iframe_options, preloader, $title, tmp, type; plugin.settings = $.extend({}, defaults, options); plugin.isIE6 = (browser.name === 'explorer' && browser.version === 6) || !1; if (plugin.settings.modal) {
                plugin.overlay = $('<div>', { 'class': 'ZebraDialogOverlay' }).css({ 'position': (plugin.isIE6 ? 'absolute' : 'fixed'), 'left': 0, 'top': 0, 'opacity': plugin.settings.overlay_opacity + '' }); if (plugin.settings.overlay_close)
                    plugin.overlay.on('click', function () { plugin.close() }); plugin.overlay.appendTo('body')
                }
                plugin.dialog = $('<div>', { 'class': 'ZebraDialog' + (plugin.settings.custom_class ? ' ' + plugin.settings.custom_class : '') + (_get_type() !== !1 ? ' ZebraDialog_Icon ZebraDialog_' + _get_type() : '') }).css({ 'position': (plugin.isIE6 ? 'absolute' : 'fixed'), 'left': 0, 'top': 0, 'visibility': 'hidden' }); if (!plugin.settings.buttons && plugin.settings.auto_close)
                    plugin.dialog.attr('id', 'ZebraDialog_' + Math.floor(Math.random() * 9999999)); tmp = parseInt(plugin.settings.width, 10); if (!isNaN(tmp) && tmp === plugin.settings.width && tmp.toString() === plugin.settings.width.toString() && tmp > 0)
                    plugin.dialog.css('width', plugin.settings.width); if (plugin.settings.title)
                    $title = $('<h3>', { 'class': 'ZebraDialog_Title' }).html('<i class="icon"></i>' + plugin.settings.title).appendTo(plugin.dialog); else plugin.dialog.addClass('ZebraDialog_NoTitle'); buttons = _get_buttons(); plugin.body = $('<div>', { 'class': 'ZebraDialog_Body' }); if (plugin.settings.max_height > 0) { plugin.body.css('max-height', plugin.settings.max_height); if (plugin.isIE6) plugin.body.attr('style', 'height: expression(this.scrollHeight > ' + plugin.settings.max_height + ' ? "' + plugin.settings.max_height + 'px" : "85px")') }
                if (plugin.settings.vcenter_short_message)
                    $('<div>').html(plugin.settings.message).appendTo(plugin.body); else plugin.body.html(plugin.settings.message); if (plugin.settings.source && typeof plugin.settings.source === 'object') {
                        canvas = (plugin.settings.vcenter_short_message ? $('div:first', plugin.body) : plugin.body); for (type in plugin.settings.source)
                            switch (type) { case 'ajax': ajax_options = typeof plugin.settings.source[type] === 'string' ? { 'url': plugin.settings.source[type] } : plugin.settings.source[type]; preloader = $('<div>').attr('class', 'ZebraDialog_Preloader').appendTo(canvas); ajax_options.success = function (result) { preloader.remove(); canvas.append(result); _draw(!1) }; $.ajax(ajax_options); break; case 'iframe': default_options = { 'width': '100%', 'height': '100%', 'marginheight': '0', 'marginwidth': '0', 'frameborder': '0' }; iframe_options = $.extend(default_options, typeof plugin.settings.source[type] === 'string' ? { 'src': plugin.settings.source[type] } : plugin.settings.source[type]); canvas.append($('<iframe>').attr(iframe_options)); break; case 'inline': canvas.append(plugin.settings.source[type]); break }
                    }
                plugin.body.appendTo(plugin.dialog); if (buttons) {
                    buttons.reverse(); button_bar = $('<div>', { 'class': 'ZebraDialog_Buttons' }).appendTo(plugin.dialog); $.each(buttons, function (index, value) {
                        var button = $('<a>', { 'href': 'javascript:void(0)', 'class': 'ZebraDialog_Button_' + index + (undefined !== value.custom_class && value.custom_class.toString().trim() !== '' ? ' ' + value.custom_class : '') }); if (undefined !== value.caption) button.html(value.caption); else button.html(value); button.on('click', function () {
                            var close = !0; if (undefined !== value.callback) close = value.callback(plugin.dialog); if (close !== !1)
                                plugin.close(undefined !== value.caption ? value.caption : value)
                        }); button.appendTo(button_bar)
                    }); if (plugin.settings.center_buttons) button_bar.addClass('ZebraDialog_Buttons_Centered')
                } else plugin.dialog.addClass('ZebraDialog_NoButtons')
                plugin.dialog.appendTo('body'); if (plugin.settings.show_close_button)
                    $('<a href="javascript:void(0)" class="ZebraDialog_Close">&times;</a>').on('click', function (e) { e.preventDefault(); plugin.close() }).appendTo($title || plugin.body); else plugin.dialog.addClass('ZebraDialog_NoCloseButton'); $(window).on('resize.Zebra_Dialog', function () { clearTimeout(timeout); timeout = setTimeout(function () { _draw() }, 100) }); if (plugin.settings.keyboard)
                    $(document).on('keyup.Zebra_Dialog', function (e) { if (e.which === 27) plugin.close(); return !0 }); if (plugin.isIE6)
                    $(window).on('scroll.Zebra_Dialog', function () { _emulate_fixed_position() }); if (plugin.settings.auto_close !== !1) { plugin.dialog.on('click', function () { clearTimeout(plugin.timeout); plugin.close() }); plugin.timeout = setTimeout(plugin.close, plugin.settings.auto_close) }
                _draw(!1); return plugin
            }; plugin.close = function (caption) {
                $(document).off('.Zebra_Dialog'); $(window).off('.Zebra_Dialog'); if (plugin.overlay)
                    plugin.overlay.animate({ opacity: '0' }, plugin.settings.animation_speed_hide, function () { plugin.overlay.remove() }); plugin.dialog.animate({ top: '0', opacity: '0' }, plugin.settings.animation_speed_hide, function () {
                        plugin.dialog.remove(); if (plugin.settings.onClose && typeof plugin.settings.onClose === 'function')
                            plugin.settings.onClose(undefined !== caption ? caption : '')
                    })
            }; browser.init(); return plugin.init()
    }
})(jQuery)